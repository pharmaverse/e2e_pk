[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "End to End Examples for PK\nThis site includes end to end examples for PK using {admiral} and Pharmaverse tools"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "End to End Examples for PK\nThis site includes end to end examples for PK using {admiral} and Pharmaverse tools"
  },
  {
    "objectID": "adppk.html",
    "href": "adppk.html",
    "title": "ADPPK Template",
    "section": "",
    "text": "# Load Libraries\nlibrary(admiral)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(metacore)\nlibrary(metatools)\nlibrary(xportr)\nlibrary(readr)\n\nlibrary(admiral.test) # Contains example datasets from the CDISC pilot project or simulated"
  },
  {
    "objectID": "adppk.html#next-load-specifications-for-metacore",
    "href": "adppk.html#next-load-specifications-for-metacore",
    "title": "ADPPK Template",
    "section": "Next Load Specifications for Metacore",
    "text": "Next Load Specifications for Metacore\n\n# ---- Load Specs for Metacore ----\n\nmetacore <- spec_to_metacore(\"pk_spec.xlsx\") %>%\n  select_dataset(\"ADPPK\")\n\nWarning: structure from the ds_spec table only contain missing values.\n\ncore from the ds_vars table only contain missing values.\n\nsupp_flag from the ds_vars table only contain missing values.\n\nsig_dig from the value_spec table only contain missing values.\n\nThe following words in value_spec$origin are not allowed: \n    source\n    copied\n\n\nwhere from the value_spec table only contain missing values.\n\nderivation_id from the value_spec table only contain missing values.\n\nderivation_id from the derivations table only contain missing values.\n\nderivation from the derivations table only contain missing values.\n\ndataset from the supp table only contain missing values.\n\nvariable from the supp table only contain missing values.\n\nidvar from the supp table only contain missing values.\n\nqeval from the supp table only contain missing values.\n\n\nWarning: The following codelist(s) are never used:\n AGEU\n ARM\n ARMN\n ARMCD\n EPOCH\n EXDOSEU\n EXDOSFRM\n EXFREQ\n EXROUTE\n EXTRT\n OUT\n QEVAL\n YN\n Y_BLANK\n ISO 8601Â Date and time formats"
  },
  {
    "objectID": "adppk.html#load-source-datasets",
    "href": "adppk.html#load-source-datasets",
    "title": "ADPPK Template",
    "section": "Load Source Datasets",
    "text": "Load Source Datasets\n\n# ---- Load source datasets ----\n# Load PC, EX, VS, LB and ADSL\ndata(\"admiral_pc\")\ndata(\"admiral_ex\")\ndata(\"admiral_vs\")\ndata(\"admiral_lb\")\n\ndata(\"admiral_adsl\")\n\nadsl <- admiral_adsl\n\n# When SAS datasets are imported into R using haven::read_sas(), missing\n# character values from SAS appear as \"\" characters in R, instead of appearing\n# as NA values. Further details can be obtained via the following link:\n# https://pharmaverse.github.io/admiral/cran-release/articles/admiral.html#handling-of-missing-values # nolint\n\n# Load EX\n\nex <- convert_blanks_to_na(admiral_ex)\n\n# Load PC\n\npc <- convert_blanks_to_na(admiral_pc)\n\n# Load VS for baseline height and weight\n\nvs <- convert_blanks_to_na(admiral_vs)\n\n# Load LB for baseline lab values\n\nlb <- convert_blanks_to_na(admiral_lb)\n\n# ---- Lookup tables ----\nparam_lookup <- tibble::tribble(\n  ~PCTESTCD, ~PARAMCD, ~PARAM, ~PARAMN,\n  \"XAN\", \"XAN\", \"Pharmacokinetic concentration of Xanomeline\", 1,\n  \"DOSE\", \"DOSE\", \"Xanomeline Patch Dose\", 2,\n)"
  },
  {
    "objectID": "adppk.html#derivations",
    "href": "adppk.html#derivations",
    "title": "ADPPK Template",
    "section": "Derivations",
    "text": "Derivations\n\nDerive PC Dates\n\n# ---- Derivations ----\n\n# Get list of ADSL vars required for derivations\nadsl_vars <- exprs(TRTSDT, TRTSDTM, TRT01P, TRT01A)\n\npc_dates <- pc %>%\n  # Join ADSL with PC (need TRTSDT for ADY derivation)\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %>%\n  # Derive analysis date/time\n  # Impute missing time to 00:00:00\n  derive_vars_dtm(\n    new_vars_prefix = \"A\",\n    dtc = PCDTC,\n    time_imputation = \"00:00:00\"\n  ) %>%\n  # Derive dates and times from date/times\n  derive_vars_dtm_to_dt(exprs(ADTM)) %>%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %>%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 0,\n    DRUG = PCTEST,\n    NFRLT = if_else(PCTPTNUM < 0, 0, PCTPTNUM), .after = USUBJID\n  )\n\n\n\nGet Dosing Information\n\n# ---- Get dosing information ----\n\nex_dates <- ex %>%\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %>%\n  # Keep records with nonzero dose\n  filter(EXDOSE > 0) %>%\n  # Add time and set missing end date to start date\n  # Impute missing time to 00:00:00\n  # Note all times are missing for dosing records in this example data\n  # Derive Analysis Start and End Dates\n  derive_vars_dtm(\n    new_vars_prefix = \"AST\",\n    dtc = EXSTDTC,\n    time_imputation = \"00:00:00\"\n  ) %>%\n  derive_vars_dtm(\n    new_vars_prefix = \"AEN\",\n    dtc = EXENDTC,\n    time_imputation = \"00:00:00\"\n  ) %>%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 1,\n    NFRLT = 24 * (VISITDY - 1), .after = USUBJID\n  ) %>%\n  # Set missing end dates to start date\n  mutate(AENDTM = case_when(\n    is.na(AENDTM) ~ ASTDTM,\n    TRUE ~ AENDTM\n  )) %>%\n  # Derive dates from date/times\n  derive_vars_dtm_to_dt(exprs(ASTDTM)) %>%\n  derive_vars_dtm_to_dt(exprs(AENDTM))\n\n\n\nExpand Dosing Records\n\n# ---- Expand dosing records between start and end dates ----\n# Updated function includes nominal_time parameter\n\nex_exp <- ex_dates %>%\n  create_single_dose_dataset(\n    dose_freq = EXDOSFRQ,\n    start_date = ASTDT,\n    start_datetime = ASTDTM,\n    end_date = AENDT,\n    end_datetime = AENDTM,\n    nominal_time = NFRLT,\n    lookup_table = dose_freq_lookup,\n    lookup_column = CDISC_VALUE,\n    keep_source_vars = exprs(\n      STUDYID, USUBJID, EVID, EXDOSFRQ, EXDOSFRM,\n      NFRLT, EXDOSE, EXDOSU, EXTRT, ASTDT, ASTDTM, AENDT, AENDTM,\n      VISIT, VISITNUM, VISITDY,\n      TRT01A, TRT01P, DOMAIN, EXSEQ, !!!adsl_vars\n    )\n  ) %>%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n    ADTM = ASTDTM,\n    DRUG = EXTRT\n  ) %>%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(ADTM)) %>%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %>%\n  derive_vars_dtm_to_tm(exprs(ASTDTM)) %>%\n  derive_vars_dtm_to_tm(exprs(AENDTM))\n\n\n\nFind First Dose\n\n# ---- Find first dose per treatment per subject ----\n# ---- Join with ADPPK data and keep only subjects with dosing ----\n\nadppk_first_dose <- pc_dates %>%\n  derive_vars_merged(\n    dataset_add = ex_exp,\n    filter_add = (!is.na(ADTM)),\n    new_vars = exprs(FANLDTM = ADTM, EXDOSE_first = EXDOSE),\n    order = exprs(ADTM, EXSEQ),\n    mode = \"first\",\n    by_vars = exprs(STUDYID, USUBJID, DRUG)\n  ) %>%\n  filter(!is.na(FANLDTM)) %>%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n  )\n\n\n\nFind Previous Dose\n\n# ---- Find previous dose  ----\n\nadppk_prev <- adppk_first_dose %>%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_prev = ADTM, EXDOSE_prev = EXDOSE, AVISIT_prev = AVISIT,\n      AENDTM_prev = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    filter_add = NULL,\n    filter_join = ADTM > ADTM.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n\n\nFind Previous Nominal Dose\n\n# ---- Find previous nominal dose ----\n\nadppk_nom_prev <- adppk_prev %>%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_prev = NFRLT),\n    join_vars = exprs(NFRLT),\n    filter_add = NULL,\n    filter_join = NFRLT > NFRLT.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n\n\nCombine PC and EX Data\n\n# ---- Combine ADPPK and EX data ----\n# Derive Relative Time Variables\n\nadppk_aprlt <- bind_rows(adppk_nom_prev, ex_exp) %>%\n  group_by(USUBJID, DRUG) %>%\n  mutate(\n    FANLDTM = min(FANLDTM, na.rm = TRUE),\n    min_NFRLT = min(NFRLT, na.rm = TRUE),\n    maxdate = max(ADT[EVID == 0], na.rm = TRUE), .after = USUBJID\n  ) %>%\n  arrange(USUBJID, ADTM) %>%\n  ungroup() %>%\n  filter(ADT <= maxdate) %>%\n  # Derive Actual Relative Time from First Dose (AFRLT)\n  derive_vars_duration(\n    new_var = AFRLT,\n    start_date = FANLDTM,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %>%\n  # Derive Actual Relative Time from Reference Dose (APRLT)\n  derive_vars_duration(\n    new_var = APRLT,\n    start_date = ADTM_prev,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %>%\n  # Derive APRLT\n  mutate(\n    APRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(APRLT) ~ AFRLT,\n      TRUE ~ APRLT\n    ),\n    NPRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(NFRLT_prev) ~ NFRLT - min_NFRLT,\n      TRUE ~ NFRLT - NFRLT_prev\n    )\n  )\n\n\n\nDerive Analysis Variables\n\n# ---- Derive Analysis Variables ----\n# Derive actual dose DOSEA and planned dose DOSEP,\n# Derive AVAL and DV\n\nadppk_aval <- adppk_aprlt %>%\n  mutate(\n    # Derive Actual Dose\n    DOSEA = case_when(\n      EVID == 1 ~ EXDOSE,\n      is.na(EXDOSE_prev) ~ EXDOSE_first,\n      TRUE ~ EXDOSE_prev\n    ),\n    # Derive Planned Dose\n    DOSEP = case_when(\n      TRT01P == \"Xanomeline High Dose\" ~ 81,\n      TRT01P == \"Xanomeline Low Dose\" ~ 54,\n      TRT01P == \"Placebo\" ~ 0\n    ),\n    # Derive PARAMCD\n    PARAMCD = case_when(\n      EVID == 1 ~ \"DOSE\",\n      TRUE ~ PCTESTCD\n    ),\n    ALLOQ = PCLLOQ,\n    # Derive CMT\n    CMT = case_when(\n      EVID == 1 ~ 1,\n      TRUE ~ 2\n    ),\n    # Derive BLQFL/BLQFN\n    BLQFL = case_when(\n      PCSTRESC == \"<BLQ\" ~ \"Y\",\n      TRUE ~ \"N\"\n    ),\n    BLQFN = case_when(\n      PCSTRESC == \"<BLQ\" ~ 1,\n      TRUE ~ 0\n    ),\n    AMT = case_when(\n      EVID == 1 ~ EXDOSE,\n      TRUE ~ NA_real_\n    ),\n    # Derive DV and AVAL\n    DV = PCSTRESN,\n    AVAL = DV,\n    DVL = case_when(\n      DV != 0 ~ log(DV),\n      TRUE ~ NA_real_\n    ),\n    # Derive MDV\n    MDV = case_when(\n      EVID == 1 ~ 1,\n      is.na(DV) ~ 1,\n      TRUE ~ 0\n    ),\n    AVALU = case_when(\n      EVID == 1 ~ NA_character_,\n      TRUE ~ PCSTRESU\n    ),\n    UDTC = format_ISO8601(ADTM),\n    II = if_else(EVID == 1, 1, 0),\n    SS = if_else(EVID == 1, 1, 0)\n  )\n\n\n\nAdd ASEQ\n\n# ---- Add ASEQ ----\n\nadppk_aseq <- adppk_aval %>%\n  # Calculate ASEQ\n  derive_var_obs_number(\n    new_var = ASEQ,\n    by_vars = exprs(STUDYID, USUBJID),\n    order = exprs(AFRLT, EVID),\n    check_type = \"error\"\n  ) %>%\n  # Derive PARAM and PARAMN\n  derive_vars_merged(dataset_add = select(param_lookup, -PCTESTCD), by_vars = exprs(PARAMCD)) %>%\n  mutate(\n    PROJID = DRUG,\n    PROJIDN = 1\n  ) %>%\n  # Remove temporary variables\n  select(\n    -DOMAIN, -starts_with(\"min\"), -starts_with(\"max\"), -starts_with(\"EX\"),\n    -starts_with(\"PC\"), -ends_with(\"first\"), -ends_with(\"prev\"),\n    -ends_with(\"DTM\"), -ends_with(\"DT\"), -ends_with(\"TM\"), -starts_with(\"VISIT\"),\n    -starts_with(\"AVISIT\"), -starts_with(\"PARAM\"),\n    -ends_with(\"TMF\"), -starts_with(\"TRT\"), -starts_with(\"ATPT\"), -DRUG\n  )"
  },
  {
    "objectID": "adppk.html#derive-covariates-using-metacore",
    "href": "adppk.html#derive-covariates-using-metacore",
    "title": "ADPPK Template",
    "section": "Derive Covariates Using Metacore",
    "text": "Derive Covariates Using Metacore\n\n#---- Derive Covariates ----\n# Include numeric values for STUDYIDN, USUBJIDN, SEXN, RACEN etc.\n\ncovar <- adsl %>%\n  create_var_from_codelist(metacore, input_var = STUDYID, out_var = STUDYIDN) %>% \n  create_var_from_codelist(metacore, input_var = SEX, out_var = SEXN) %>% \n  create_var_from_codelist(metacore, input_var = RACE, out_var = RACEN) %>% \n  create_var_from_codelist(metacore, input_var = ETHNIC, out_var = AETHNIC) %>% \n  create_var_from_codelist(metacore, input_var = AETHNIC, out_var = AETHNICN) %>% \n  create_var_from_codelist(metacore, input_var = ARMCD, out_var = COHORT) %>% \n  create_var_from_codelist(metacore, input_var = ARMCD, out_var = COHORTC) %>% \n  create_var_from_codelist(metacore, input_var = COUNTRY, out_var = COUNTRYN) %>% \n  create_var_from_codelist(metacore, input_var = COUNTRY, out_var = COUNTRYL) %>% \n  mutate(\n    STUDYIDN = as.numeric(word(USUBJID, 1, sep = fixed(\"-\"))),\n    SITEIDN = as.numeric(word(USUBJID, 2, sep = fixed(\"-\"))),\n    USUBJIDN = as.numeric(word(USUBJID, 3, sep = fixed(\"-\"))),\n    SUBJIDN = as.numeric(SUBJID),\n    ROUTE = unique(ex$EXROUTE),\n    FORM = unique(ex$EXDOSFRM),\n    REGION1N = COUNTRYN\n  ) %>%\n  create_var_from_codelist(metacore, input_var = FORM, out_var = FORMN) %>% \n  create_var_from_codelist(metacore, input_var = ROUTE, out_var = ROUTEN) %>% \n  select(\n    STUDYID, STUDYIDN, SITEID, SITEIDN, USUBJID, USUBJIDN,\n    SUBJID, SUBJIDN, AGE, SEX, SEXN, COHORT, COHORTC, ROUTE, ROUTEN,\n    RACE, RACEN, AETHNIC, AETHNICN, FORM, FORMN, COUNTRY, COUNTRYN,\n    REGION1, REGION1N\n  )\n\n\nDerive Additional Baselines\n\n#---- Derive additional baselines from VS and LB ----\n\nlabsbl <- lb %>%\n  filter(LBBLFL == \"Y\" & LBTESTCD %in% c(\"CREAT\", \"ALT\", \"AST\", \"BILI\")) %>%\n  mutate(LBTESTCDB = paste0(LBTESTCD, \"BL\")) %>%\n  select(STUDYID, USUBJID, LBTESTCDB, LBSTRESN)\n\ncovar_vslb <- covar %>%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"HEIGHT\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(HTBL = VSSTRESN)\n  ) %>%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"WEIGHT\" & VSBLFL == \"Y\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(WTBL = VSSTRESN)\n  ) %>%\n  derive_vars_transposed(\n    dataset_merge = labsbl,\n    by_vars = exprs(STUDYID, USUBJID),\n    key_var = LBTESTCDB,\n    value_var = LBSTRESN\n  ) %>%\n  mutate(\n    BMIBL = compute_bmi(height = HTBL, weight = WTBL),\n    BSABL = compute_bsa(\n      height = HTBL,\n      weight = HTBL,\n      method = \"Mosteller\"\n    ),\n    CRCLBL = compute_egfr(\n      creat = CREATBL, creatu = \"SI\", age = AGE, wt = WTBL, sex = SEX,\n      method = \"CRCL\"\n    ),\n    EGFRBL = compute_egfr(\n      creat = CREATBL, creatu = \"SI\", age = AGE, wt = WTBL, sex = SEX,\n      method = \"CKD-EPI\"\n    )\n  ) %>%\n  rename(TBILBL = BILIBL)\n\n\n\nCombine with Covariates\n\n# Combine covariates with APPPK data\n\nadppk_prefinal <- adppk_aseq %>%\n  derive_vars_merged(\n    dataset_add = covar_vslb,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %>%\n  arrange(STUDYIDN, USUBJIDN, AFRLT, EVID) %>%\n  mutate(RECSEQ = row_number())"
  },
  {
    "objectID": "adppk.html#check-data-with-metacore",
    "href": "adppk.html#check-data-with-metacore",
    "title": "ADPPK Template",
    "section": "Check Data With Metacore",
    "text": "Check Data With Metacore\n\n# Final Steps, Select final variables and Add labels\n# This process will be based on your metadata, no example given for this reason\n# ...\n\ndir <- \"./output\"\n\n# Apply metadata and perform associated checks ----\n# uses {metatools}\n\nadppk <- adppk_prefinal %>%\n  drop_unspec_vars(metacore) %>% # Drop unspecified variables from specs\n  #check_variables(metacore) %>% # Check all variables specified are present and no more\n  check_ct_data(metacore) %>% # Checks all variables with CT only contain values within the CT\n  order_cols(metacore) %>% # Orders the columns according to the spec\n  sort_by_key(metacore) # Sorts the rows by the sort keys\n\nThe following variable(s) were dropped:\n  DOSEP\n  DVL\n  ASEQ"
  },
  {
    "objectID": "adppk.html#apply-labels-and-formats-with-xportr",
    "href": "adppk.html#apply-labels-and-formats-with-xportr",
    "title": "ADPPK Template",
    "section": "Apply Labels and Formats with xportr",
    "text": "Apply Labels and Formats with xportr\n\nadppk_xpt <- adppk %>%\n  xportr_type(metacore) %>% # Coerce variable type to match spec\n  xportr_length(metacore) %>% # Assigns SAS length from a variable level metadata\n  xportr_label(metacore) %>% # Assigns variable label from metacore specifications\n  xportr_format(metacore) %>% # Assigns variable format from metacore specifications\n  xportr_df_label(metacore) %>% # Assigns dataset label from metacore specifications\n  xportr_write(file.path(dir, \"adppk.xpt\")) # Write xpt v5 transport file"
  },
  {
    "objectID": "adppk.html#save-final-output",
    "href": "adppk.html#save-final-output",
    "title": "ADPPK Template",
    "section": "Save Final Output",
    "text": "Save Final Output\n\n# ---- Save output ----\n\nsaveRDS(adppk, file = file.path(dir, \"adppk.rds\"), compress = \"bzip2\")\n\n# Write CSV\nwrite_csv(adppk_xpt, \"./output/adppk.csv\")"
  }
]
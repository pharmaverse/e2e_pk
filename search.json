[
  {
    "objectID": "adpc.html",
    "href": "adpc.html",
    "title": "ADPC Template Walkthrough",
    "section": "",
    "text": "The Non-compartmental analysis (NCA) ADaM uses the CDISC Implementation Guide (https://www.cdisc.org/standards/foundational/adam/adamig-non-compartmental-analysis-input-data-v1-0). This example presented uses underlying EX and PC domains where the EX and PC domains represent data as collected and the ADPC ADaM is output. However, the example can be applied to situations where an EC domain is used as input instead of EX and/or ADNCA or another ADaM is created.\nOne of the important aspects of the dataset is the derivation of relative timing variables. These variables consist of nominal and actual times, and refer to the time from first dose or time from most recent reference dose. The reference dose for pre-dose records may be the upcoming dose. The CDISC Implementation Guide makes use of duplicated records for analysis, which allows the same record to be used both with respect to the previous dose and the next upcoming dose. This is illustrated later in this vignette.\nHere are the relative time variables we will use. These correspond to the names in the CDISC Implementation Guide."
  },
  {
    "objectID": "adpc.html#first-load-packages",
    "href": "adpc.html#first-load-packages",
    "title": "ADPC Template Walkthrough",
    "section": "First Load Packages",
    "text": "First Load Packages\nFirst we will load the packages required for our project. We will use {admiral} for the creation of analysis data. {admiral} requires {dplyr}, {lubridate} and {stringr}. We will use {metacore} and {metatools} to store and manipulate metadata from our specifications. We will use {xportr} to perform checks on the final data and export to a transport file.\nThe source SDTM data will come from the CDISC pilot study data stored in {pharmaversesdtm}.\n\n# Load Packages\nlibrary(admiral)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(metacore)\nlibrary(metatools)\nlibrary(xportr)\nlibrary(pharmaversesdtm)"
  },
  {
    "objectID": "adpc.html#next-load-specifications-for-metacore",
    "href": "adpc.html#next-load-specifications-for-metacore",
    "title": "ADPC Template Walkthrough",
    "section": "Next Load Specifications for Metacore",
    "text": "Next Load Specifications for Metacore\nWe have saved our specifications in an Excel file and will load them into {metacore} with the spec_to_metacore() function. The spec file can be found here.\n\n# ---- Load Specs for Metacore ----\n\nmetacore &lt;- spec_to_metacore(\"pk_spec.xlsx\") %&gt;%\n  select_dataset(\"ADPC\")"
  },
  {
    "objectID": "adpc.html#load-source-datasets",
    "href": "adpc.html#load-source-datasets",
    "title": "ADPC Template Walkthrough",
    "section": "Load Source Datasets",
    "text": "Load Source Datasets\nWe will load are SDTM data from {pharmaversesdtm}. The main components of this will be exposure data from EX and pharmacokinetic concentration data from PC. We will use ADSL for baseline characteristics and we will derive additional baselines from vital signs VS.\n\n# ---- Load source datasets ----\n# Load PC, EX, VS, LB and ADSL\ndata(\"pc\")\ndata(\"ex\")\ndata(\"vs\")\n\ndata(\"admiral_adsl\")\n\nadsl &lt;- admiral_adsl\nex &lt;- convert_blanks_to_na(ex)\npc &lt;- convert_blanks_to_na(pc)\nvs &lt;- convert_blanks_to_na(vs)"
  },
  {
    "objectID": "adpc.html#derivations",
    "href": "adpc.html#derivations",
    "title": "ADPC Template Walkthrough",
    "section": "Derivations",
    "text": "Derivations\n\nDerive PC Dates\nAt this step, it may be useful to join ADSL to your PC and EX domains as well. Only the ADSL variables used for derivations are selected at this step. The rest of the relevant ADSL variables will be added later.\nIn this case we will keep TRTSDT/TRTSDTM for day derivation and TRT01P/TRT01A for planned and actual treatments.\nIn this segment we will use derive_vars_merged() to join the ADSL variables and the following {admiral} functions to derive analysis dates, times and days:\n\nderive_vars_dtm()\nderive_vars_dtm_to_dt()\nderive_vars_dtm_to_tm()\nderive_vars_dy()\n\nWe will also create NFRLT for PC data based on PCTPTNUM. We will create an event ID (EVID) of 0 for concentration records and 1 for dosing records. This is a traditional variable that will provide a handy tool to identify records but will be dropped from the final dataset in this example.\n\n# Get list of ADSL vars required for derivations\nadsl_vars &lt;- exprs(TRTSDT, TRTSDTM, TRT01P, TRT01A)\n\npc_dates &lt;- pc %&gt;%\n  # Join ADSL with PC (need TRTSDT for ADY derivation)\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Derive analysis date/time\n  # Impute missing time to 00:00:00\n  derive_vars_dtm(\n    new_vars_prefix = \"A\",\n    dtc = PCDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive dates and times from date/times\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT)) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 0,\n    DRUG = PCTEST,\n    NFRLT = if_else(PCTPTNUM &lt; 0, 0, PCTPTNUM), .after = USUBJID\n  )\n\n\n\nGet Dosing Information\nNext we will also join ADSL data with EX and derive dates/times. This section uses the {admiral} functions derive_vars_merged(), derive_vars_dtm(), and derive_vars_dtm_to_dt(). Time is imputed to 00:00:00 here for reasons specific to the sample data. Other imputation times may be used based on study details. Here we create NFRLT for EX data based on VISITDY using the formula (VISITDY - 1) * 24 using dplyr::mutate.\n\nex_dates &lt;- ex %&gt;%\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Keep records with nonzero dose\n  filter(EXDOSE &gt; 0) %&gt;%\n  # Add time and set missing end date to start date\n  # Impute missing time to 00:00:00\n  # Note all times are missing for dosing records in this example data\n  # Derive Analysis Start and End Dates\n  derive_vars_dtm(\n    new_vars_prefix = \"AST\",\n    dtc = EXSTDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  derive_vars_dtm(\n    new_vars_prefix = \"AEN\",\n    dtc = EXENDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 1,\n    NFRLT = 24 * (VISITDY - 1), .after = USUBJID\n  ) %&gt;%\n  # Set missing end dates to start date\n  mutate(AENDTM = case_when(\n    is.na(AENDTM) ~ ASTDTM,\n    TRUE ~ AENDTM\n  )) %&gt;%\n  # Derive dates from date/times\n  derive_vars_dtm_to_dt(exprs(ASTDTM)) %&gt;%\n  derive_vars_dtm_to_dt(exprs(AENDTM))\n\n\n\nExpand Dosing Records\nThe function create_single_dose_dataset() can be used to expand dosing records between the start date and end date. The nominal time will also be expanded based on the values of EXDOSFRQ, for example “QD” will result in nominal time being incremented by 24 hours and “BID” will result in nominal time being incremented by 12 hours. This is a new feature of create_single_dose_dataset().\nDates and times will be derived after expansion using derive_vars_dtm_to_dt() and derive_vars_dtm_to_tm().\nFor this example study we will define analysis visit (AVISIT) based on the nominal day value from NFRLT and give it the format, “Day 1”, “Day 2”, “Day 3”, etc. This is important for creating the BASETYPE variable later. DRUG is created from EXTRT here. This will be useful for linking treatment data with concentration data if there are multiple drugs and/or analytes, but this variable will also be dropped from the final dataset in this example.\n\n# ---- Expand dosing records between start and end dates ----\n# Updated function includes nominal_time parameter\n\nex_exp &lt;- ex_dates %&gt;%\n  create_single_dose_dataset(\n    dose_freq = EXDOSFRQ,\n    start_date = ASTDT,\n    start_datetime = ASTDTM,\n    end_date = AENDT,\n    end_datetime = AENDTM,\n    nominal_time = NFRLT,\n    lookup_table = dose_freq_lookup,\n    lookup_column = CDISC_VALUE,\n    keep_source_vars = exprs(\n      STUDYID, USUBJID, EVID, EXDOSFRQ, EXDOSFRM,\n      NFRLT, EXDOSE, EXDOSU, EXTRT, ASTDT, ASTDTM, AENDT, AENDTM,\n      VISIT, VISITNUM, VISITDY,\n      TRT01A, TRT01P, DOMAIN, EXSEQ, !!!adsl_vars\n    )\n  ) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n    ADTM = ASTDTM,\n    DRUG = EXTRT\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ASTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(AENDTM)) %&gt;%\n  derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT))\n\n\n\nFind First Dose\nIn this section we will find the first dose for each subject and drug, using derive_vars_merged(). We also create an analysis visit (AVISIT) based on NFRLT. The first dose datetime for an analyte FANLDTM is calculated as the minimum ADTM from the dosing records by subject and drug.\n\n# ---- Find first dose per treatment per subject ----\n# ---- Join with ADPC data and keep only subjects with dosing ----\n\nadpc_first_dose &lt;- pc_dates %&gt;%\n  derive_vars_merged(\n    dataset_add = ex_exp,\n    filter_add = (EXDOSE &gt; 0 & !is.na(ADTM)),\n    new_vars = exprs(FANLDTM = ADTM),\n    order = exprs(ADTM, EXSEQ),\n    mode = \"first\",\n    by_vars = exprs(STUDYID, USUBJID, DRUG)\n  ) %&gt;%\n  filter(!is.na(FANLDTM)) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n  )\n\n\n\nFind Previous Dose\nUse derive_vars_joined() to find the previous dose data. This will join the expanded EX data with the ADPC based on the analysis date ADTM. Note the filter_join parameter. In addition to the date of the previous dose (ADTM_prev), we also keep the actual dose amount EXDOSE_prev and the analysis visit of the dose AVISIT_prev.\n\n# ---- Find previous dose  ----\n\nadpc_prev &lt;- adpc_first_dose %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_prev = ADTM, EXDOSE_prev = EXDOSE, AVISIT_prev = AVISIT,\n      AENDTM_prev = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = ADTM &gt; ADTM.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n\n\nFind Next Dose\nSimilarly, find next dose information using derive_vars_joined() with the filter_join parameter as ADTM &lt;= ADTM.join. Here we keep the next dose analysis date ADTM_next, the next actual dose EXDOSE_next, and the next analysis visit AVISIT_next.\n\n# ---- Find next dose  ----\n\nadpc_next &lt;- adpc_prev %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_next = ADTM, EXDOSE_next = EXDOSE, AVISIT_next = AVISIT,\n      AENDTM_next = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = ADTM &lt;= ADTM.join,\n    mode = \"first\",\n    check_type = \"none\"\n  )\n\n\n\nFind Previous Nominal Dose\nUse the same method to find the previous and next nominal times. Note that here the data are sorted by nominal time rather than the actual time. This will tell us when the previous dose and the next dose were supposed to occur. Sometimes this will differ from the actual times in a study. Here we keep the previous nominal dose time NFRLT_prev and the next nominal dose time NFRLT_next. Note that the filter_join parameter uses the nominal relative times, e.g. NFRLT &gt; NFRLT.join.\n\n# ---- Find previous nominal dose ----\n\nadpc_nom_prev &lt;- adpc_next %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_prev = NFRLT),\n    join_vars = exprs(NFRLT),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = NFRLT &gt; NFRLT.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n\n\nFind Next Nominal Time\n\n# ---- Find next nominal time ----\n\nadpc_nom_next &lt;- adpc_nom_prev %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_next = NFRLT),\n    join_vars = exprs(NFRLT),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = NFRLT &lt;= NFRLT.join,\n    mode = \"first\",\n    check_type = \"none\"\n  )\n\n\n\nCombine PC and EX Data\nCombine PC and EX records and derive the additional relative time variables. Often NCA data will keep both dosing and concentration records. We will keep both here. Sometimes you will see ADPC with only the concentration records. If this is desired, the dosing records can be dropped before saving the final dataset. We will use the {admiral} function derive_vars_duration() to calculate the actual relative time from first dose (AFRLT) and the actual relative time from most recent dose (ARRLT). Note that we use the parameter add_one = FALSE here. We will also create a variable representing actual time to next dose (AXRLT) which is not kept, but will be used when we create duplicated records for analysis for the pre-dose records. For now, we will update missing values of ARRLT corresponding to the pre-dose records with AXRLT, and dosing records will be set to zero.\nWe also calculate the reference dates FANLDTM (First Datetime of Dose for Analyte) and PCRFTDTM (Reference Datetime of Dose for Analyte) and their corresponding date and time variables.\nWe calculate the maximum date for concentration records and only keep the dosing records up to that date.\n\n# ---- Combine ADPC and EX data ----\n# Derive Relative Time Variables\n\nadpc_arrlt &lt;- bind_rows(adpc_nom_next, ex_exp) %&gt;%\n  group_by(USUBJID, DRUG) %&gt;%\n  mutate(\n    FANLDTM = min(FANLDTM, na.rm = TRUE),\n    min_NFRLT = min(NFRLT_prev, na.rm = TRUE),\n    maxdate = max(ADT[EVID == 0], na.rm = TRUE), .after = USUBJID\n  ) %&gt;%\n  arrange(USUBJID, ADTM) %&gt;%\n  ungroup() %&gt;%\n  filter(ADT &lt;= maxdate) %&gt;%\n  # Derive Actual Relative Time from First Dose (AFRLT)\n  derive_vars_duration(\n    new_var = AFRLT,\n    start_date = FANLDTM,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive Actual Relative Time from Reference Dose (ARRLT)\n  derive_vars_duration(\n    new_var = ARRLT,\n    start_date = ADTM_prev,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive Actual Relative Time from Next Dose (AXRLT not kept)\n  derive_vars_duration(\n    new_var = AXRLT,\n    start_date = ADTM_next,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  mutate(\n    ARRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(ARRLT) ~ AXRLT,\n      TRUE ~ ARRLT\n    ),\n    # Derive Reference Dose Date\n    PCRFTDTM = case_when(\n      EVID == 1 ~ ADTM,\n      is.na(ADTM_prev) ~ ADTM_next,\n      TRUE ~ ADTM_prev\n    )\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(FANLDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(FANLDTM)) %&gt;%\n  derive_vars_dtm_to_dt(exprs(PCRFTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(PCRFTDTM))\n\n\n\nDerive Nominal Reference\nFor nominal relative times we calculate NRRLT generally as NFRLT - NFRLT_prev and NXRLT as NFRLT - NFRLT_next.\n\n# Derive Nominal Relative Time from Reference Dose (NRRLT)\n\nadpc_nrrlt &lt;- adpc_arrlt %&gt;%\n  mutate(\n    NRRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(NFRLT_prev) ~ NFRLT - min_NFRLT,\n      TRUE ~ NFRLT - NFRLT_prev\n    ),\n    NXRLT = case_when(\n      EVID == 1 ~ 0,\n      TRUE ~ NFRLT - NFRLT_next\n    )\n  )\n\n\n\nDerive Analysis Variables\nUsing dplyr::mutate we derive a number of analysis variables including analysis value (AVAL), analysis time point (ATPT) analysis timepoint reference (ATPTREF) and baseline type (BASETYPE).\nWe set ATPT to PCTPT for concentration records and to “Dose” for dosing records. The analysis timepoint reference ATPTREF will correspond to the dosing visit. We will use AVISIT_prev and AVISIT_next to derive. The baseline type will be a concatenation of ATPTREF and “Baseline” with values such as “Day 1 Baseline”, “Day 2 Baseline”, etc. The baseline flag ABLFL will be set to “Y” for pre-dose records.\nAnalysis value AVAL in this example comes from PCSTRESN for concentration records. In addition we are including the dose value EXDOSE for dosing records and setting BLQ (Below Limit of Quantitation) records to 0 before the first dose and to 1/2 of LLOQ (Lower Limit of Quantitation) for records after first dose. (Additional tests such as whether more than 1/3 of records are BLQ may be required and are not done in this example.) We also create a listing-ready variable AVALCAT1 which includes the “BLQ” record indicator and formats the numeric values to three significant digits.\nWe derive actual dose DOSEA based on EXDOSE_prev and EXDOSE_next and planned dose DOSEP based on the planned treatment TRT01P. In addition we add the units for the dose variables and the relative time variables.\n\n# ---- Derive Analysis Variables ----\n# Derive ATPTN, ATPT, ATPTREF, ABLFL and BASETYPE\n# Derive planned dose DOSEP, actual dose DOSEA and units\n# Derive PARAMCD and relative time units\n# Derive AVAL, AVALU and AVALCAT1\n\nadpc_aval &lt;- adpc_nrrlt %&gt;%\n  mutate(\n    ATPTN = case_when(\n      EVID == 1 ~ 0,\n      TRUE ~ PCTPTNUM\n    ),\n    ATPT = case_when(\n      EVID == 1 ~ \"Dose\",\n      TRUE ~ PCTPT\n    ),\n    ATPTREF = case_when(\n      EVID == 1 ~ AVISIT,\n      is.na(AVISIT_prev) ~ AVISIT_next,\n      TRUE ~ AVISIT_prev\n    ),\n    # Derive baseline flag for pre-dose records\n    ABLFL = case_when(\n      ATPT == \"Pre-dose\" ~ \"Y\",\n      TRUE ~ NA_character_\n    ),\n    # Derive BASETYPE\n    BASETYPE = paste(ATPTREF, \"Baseline\"),\n\n    # Derive Actual Dose\n    DOSEA = case_when(\n      EVID == 1 ~ EXDOSE,\n      is.na(EXDOSE_prev) ~ EXDOSE_next,\n      TRUE ~ EXDOSE_prev\n    ),\n    # Derive Planned Dose\n    DOSEP = case_when(\n      TRT01P == \"Xanomeline High Dose\" ~ 81,\n      TRT01P == \"Xanomeline Low Dose\" ~ 54\n    ),\n    DOSEU = \"mg\",\n  ) %&gt;%\n  # Derive relative time units\n  mutate(\n    FRLTU = \"h\",\n    RRLTU = \"h\",\n    # Derive PARAMCD\n    PARAMCD = coalesce(PCTESTCD, \"DOSE\"),\n    ALLOQ = PCLLOQ,\n    # Derive AVAL\n    AVAL = case_when(\n      EVID == 1 ~ EXDOSE,\n      PCSTRESC == \"&lt;BLQ\" & NFRLT == 0 ~ 0,\n      PCSTRESC == \"&lt;BLQ\" & NFRLT &gt; 0 ~ 0.5 * ALLOQ,\n      TRUE ~ PCSTRESN\n    ),\n    AVALU = case_when(\n      EVID == 1 ~ EXDOSU,\n      TRUE ~ PCSTRESU\n    ),\n    AVALCAT1 = if_else(PCSTRESC == \"&lt;BLQ\", PCSTRESC, prettyNum(signif(AVAL, digits = 3))),\n  ) %&gt;%\n  # Add SRCSEQ\n  mutate(\n    SRCDOM = DOMAIN,\n    SRCVAR = \"SEQ\",\n    SRCSEQ = coalesce(PCSEQ, EXSEQ)\n  )\n\n\n\nDerive DTYPE Copy Records\nAs mentioned above, the CDISC ADaM Implementation Guide for Non-compartmental Analysis uses duplicated records for analysis when a record needs to be used in more than one way. In this example the 24 hour post-dose record will also be used a the pre-dose record for the “Day 2” dose. In addition to 24 hour post-dose records, other situations may include pre-dose records for “Cycle 2 Day 1”, etc.\nIn general, we will select the records of interest and then update the relative time variables for the duplicated records. In this case we will select where the nominal relative time to next dose is zero. (Note that we do not need to duplicate the first dose record since there is no prior dose.)\nDTYPE is set to “COPY” for the duplicated records and the original PCSEQ value is retained. In this case we change “24h Post-dose” to “Pre-dose”. ABLFL is set to “Y” since these records will serve as baseline for the “Day 2” dose. DOSEA is set to EXDOSE_next and PCRFTDTM is set to ADTM_next.\n\n# ---- Create DTYPE copy records ----\n\ndtype &lt;- adpc_aval %&gt;%\n  filter(NFRLT &gt; 0 & NXRLT == 0 & EVID == 0 & !is.na(AVISIT_next)) %&gt;%\n  select(-PCRFTDT, -PCRFTTM) %&gt;%\n  # Re-derive variables in for DTYPE copy records\n  mutate(\n    ABLFL = NA_character_,\n    ATPTREF = AVISIT_next,\n    ARRLT = AXRLT,\n    NRRLT = NXRLT,\n    PCRFTDTM = ADTM_next,\n    DOSEA = EXDOSE_next,\n    BASETYPE = paste(AVISIT_next, \"Baseline\"),\n    ATPT = \"Pre-dose\",\n    ATPTN = NFRLT,\n    ABLFL = \"Y\",\n    DTYPE = \"COPY\"\n  ) %&gt;%\n  derive_vars_dtm_to_dt(exprs(PCRFTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(PCRFTDTM))\n\n\n\nCombine Original and DTYPE Copy\nNow the duplicated records are combined with the original records. We also derive the modified relative time from reference dose MRRLT. In this case, negative values of ARRLT are set to zero.\nThis is also an opportunity to derive analysis flags e.g. ANL01FL , ANL02FL etc. In this example ANL01FL is set to “Y” for all records and ANL02FL is set to “Y” for all records except the duplicated records with DTYPE = “COPY”. Additional flags may be used to select full profile records and/or to select records included in the tables and figures, etc.\n\n# ---- Combine original records and DTYPE copy records ----\n\nadpc_dtype &lt;- bind_rows(adpc_aval, dtype) %&gt;%\n  arrange(STUDYID, USUBJID, BASETYPE, ADTM, NFRLT) %&gt;%\n  mutate(\n    # Derive MRRLT, ANL01FL and ANL02FL\n    MRRLT = if_else(ARRLT &lt; 0, 0, ARRLT),\n    ANL01FL = \"Y\",\n    ANL02FL = if_else(is.na(DTYPE), \"Y\", NA_character_),\n  )\n\n\n\nDerive BASE and CHG\nThe {admiral} function derive_var_base() is used to derive BASE and the function derive_var_chg() is used to derive change from baseline CHG.\n\n# ---- Derive BASE and Calculate Change from Baseline ----\n\nadpc_base &lt;- adpc_dtype %&gt;%\n  derive_var_base(\n    by_vars = exprs(STUDYID, USUBJID, PARAMCD, BASETYPE),\n    source_var = AVAL,\n    new_var = BASE,\n    filter = ABLFL == \"Y\"\n  )\n\nadpc_chg &lt;- derive_var_chg(adpc_base)\n\n\n\nAdd ASEQ\nWe also now derive ASEQ using derive_var_obs_number() and we drop intermediate variables such as those ending with “_prev” and “_next”.\nFinally we derive PARAM and PARAMN using create_var_from_codelist() from {metatools}.\n\n# ---- Add ASEQ ----\n\nadpc_aseq &lt;- adpc_chg %&gt;%\n  # Calculate ASEQ\n  derive_var_obs_number(\n    new_var = ASEQ,\n    by_vars = exprs(STUDYID, USUBJID),\n    order = exprs(ADTM, BASETYPE, EVID, AVISITN, ATPTN, DTYPE),\n    check_type = \"error\"\n  ) %&gt;%\n  # Derive PARAM and PARAMN using metatools\n  create_var_from_codelist(metacore, input_var = PARAMCD, out_var = PARAM) %&gt;%\n  create_var_from_codelist(metacore, input_var = PARAMCD, out_var = PARAMN)\n\n\n\nDerive Additional Baselines\nHere we derive additional baseline values from VS for baseline height HTBL and weight WTBL and compute the body mass index (BMI) with compute_bmi(). These values could also be obtained from ADVS if available. Baseline lab values could also be derived from LB or ADLB in a similar manner.\n\n#---- Derive additional baselines from VS ----\n\nadpc_baselines &lt;- adpc_aseq %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"HEIGHT\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(HTBL = VSSTRESN, HTBLU = VSSTRESU)\n  ) %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"WEIGHT\" & VSBLFL == \"Y\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(WTBL = VSSTRESN, WTBLU = VSSTRESU)\n  ) %&gt;%\n  mutate(\n    BMIBL = compute_bmi(height = HTBL, weight = WTBL),\n    BMIBLU = \"kg/m^2\"\n  )\n\n\n\nCombine with ADSL\nIf needed, the other ADSL variables can now be added:\n\n# ---- Add all ADSL variables ----\n\n# Add all ADSL variables\nadpc_prefinal &lt;- adpc_baselines %&gt;%\n  derive_vars_merged(\n    dataset_add = select(adsl, !!!negate_vars(adsl_vars)),\n    by_vars = exprs(STUDYID, USUBJID)\n  )"
  },
  {
    "objectID": "adpc.html#check-data-with-metacore",
    "href": "adpc.html#check-data-with-metacore",
    "title": "ADPC Template Walkthrough",
    "section": "Check Data With Metacore",
    "text": "Check Data With Metacore\nWe use {metacore} to perform a number of checks on the data. We will drop variables not in the specs and make sure all the variables from the specs are included.\n\n# Final Steps, Select final variables and Add labels\n\ndir &lt;- \"./output\"\n\n# Apply metadata and perform associated checks ----\n# uses {metatools}\nadpc &lt;- adpc_prefinal %&gt;%\n  drop_unspec_vars(metacore) %&gt;% # Drop unspecified variables from specs\n  check_variables(metacore) %&gt;% # Check all variables specified are present and no more\n  check_ct_data(metacore) %&gt;% # Checks all variables with CT only contain values within the CT\n  order_cols(metacore) %&gt;% # Orders the columns according to the spec\n  sort_by_key(metacore) # Sorts the rows by the sort keys"
  },
  {
    "objectID": "adpc.html#apply-labels-and-formats-with-xportr",
    "href": "adpc.html#apply-labels-and-formats-with-xportr",
    "title": "ADPC Template Walkthrough",
    "section": "Apply Labels and Formats with xportr",
    "text": "Apply Labels and Formats with xportr\nUsing {xportr} we check variable type, assign variable lenght, add variable labels, add variable formats, and save a transport file.\n\nadpc_xpt &lt;- adpc %&gt;%\n  xportr_type(metacore) %&gt;% # Coerce variable type to match spec\n  xportr_length(metacore) %&gt;% # Assigns SAS length from a variable level metadata\n  xportr_label(metacore) %&gt;% # Assigns variable label from metacore specifications\n  xportr_format(metacore) %&gt;% # Assigns variable format from metacore specifications\n  xportr_df_label(metacore) %&gt;% # Assigns dataset label from metacore specifications\n  xportr_write(file.path(dir, \"adpc.xpt\")) # Write xpt v5 transport file"
  },
  {
    "objectID": "adpc.html#save-final-output",
    "href": "adpc.html#save-final-output",
    "title": "ADPC Template Walkthrough",
    "section": "Save Final Output",
    "text": "Save Final Output\nFinally we save the final output.\n\n# ---- Save output ----\n\nsaveRDS(adpc, file = file.path(dir, \"adpc.rds\"), compress = \"bzip2\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "End to End Examples for PK",
    "section": "",
    "text": "This site includes end to end examples for PK using {admiral} and other Pharmaverse tools\n\n{admiral} – Use to build CDISC analysis data\n\n\n\n\n\n\n\n{metacore} – Create and manage metadata for the analysis data\n\n\n\n\n\n\n\n{metatools} – Work with metadata to derive variables and perform checks\n\n\n\n\n\n\n\n{xportr} – Perform checks on data and export to transport file\n\n\n\n\n\n\n\n{pharmaversesdtm} – Sample Pharmaverse CDISC SDTM data"
  },
  {
    "objectID": "adppk.html",
    "href": "adppk.html",
    "title": "ADPPK Template Walkthrough",
    "section": "",
    "text": "The Population PK Analysis Data (ADPPK) follows the CDISC Implementation Guide (https://www.cdisc.org/standards/foundational/adam/basic-data-structure-adam-poppk-implementation-guide-v1-0). Population PK models generally make use of nonlinear mixed effects models that require numeric variables. The data used in the models will include both dosing and concentration records, relative time variables, and numeric covariate variables. A DV or dependent variable is often expected. This is equivalent to the ADaM AVAL variable and will be included in addition to AVAL for ADPPK."
  },
  {
    "objectID": "adppk.html#first-load-packages",
    "href": "adppk.html#first-load-packages",
    "title": "ADPPK Template Walkthrough",
    "section": "First Load Packages",
    "text": "First Load Packages\nFirst we will load the packages required for our project. We will use {admiral} for the creation of analysis data. {admiral} requires {dplyr}, {lubridate} and {stringr}. We will use {metacore} and {metatools} to store and manipulate metadata from our specifications. We will use {xportr} to perform checks on the final data and export to a transport file.\nThe source SDTM data will come from the CDISC pilot study data stored in {pharmaversesdtm}.\n\n# Load Packages\nlibrary(admiral)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(metacore)\nlibrary(metatools)\nlibrary(xportr)\nlibrary(readr)\nlibrary(pharmaversesdtm)"
  },
  {
    "objectID": "adppk.html#next-load-specifications-for-metacore",
    "href": "adppk.html#next-load-specifications-for-metacore",
    "title": "ADPPK Template Walkthrough",
    "section": "Next Load Specifications for Metacore",
    "text": "Next Load Specifications for Metacore\nWe have saved our specifications in an Excel file and will load them into {metacore} with the spec_to_metacore() function. The spec file can be found here\n\n# ---- Load Specs for Metacore ----\nmetacore &lt;- spec_to_metacore(\"pk_spec.xlsx\") %&gt;%\n  select_dataset(\"ADPPK\")"
  },
  {
    "objectID": "adppk.html#load-source-datasets",
    "href": "adppk.html#load-source-datasets",
    "title": "ADPPK Template Walkthrough",
    "section": "Load Source Datasets",
    "text": "Load Source Datasets\nWe will load are SDTM data from {pharmaversesdtm}. The main components of this will be exposure data from EX and pharmacokinetic concentration data from PC. We will use ADSL for baseline characteristics and we will derive additional baselines from vital signs VS and laboratory data LB.\n\n# ---- Load source datasets ----\n# Load PC, EX, VS, LB and ADSL\ndata(\"pc\")\ndata(\"ex\")\ndata(\"vs\")\ndata(\"lb\")\n\ndata(\"admiral_adsl\")\nadsl &lt;- admiral_adsl\n\nex &lt;- convert_blanks_to_na(ex)\npc &lt;- convert_blanks_to_na(pc)\nvs &lt;- convert_blanks_to_na(vs)\nlb &lt;- convert_blanks_to_na(lb)"
  },
  {
    "objectID": "adppk.html#derivations",
    "href": "adppk.html#derivations",
    "title": "ADPPK Template Walkthrough",
    "section": "Derivations",
    "text": "Derivations\n\nDerive PC Dates\nAt this step, it may be useful to join ADSL to your PC and EX domains as well. Only the ADSL variables used for derivations are selected at this step. The rest of the relevant ADSL variables will be added later.\nIn this case we will keep TRTSDT/TRTSDTM for day derivation and TRT01P/TRT01A for planned and actual treatments.\nIn this segment we will use derive_vars_merged() to join the ADSL variables and the following {admiral} functions to derive analysis dates, times and days:\n\nderive_vars_dtm()\nderive_vars_dtm_to_dt()\nderive_vars_dtm_to_tm()\nderive_vars_dy()\n\nWe will also create NFRLT for PC data based on PCTPTNUM. We will create an event ID (EVID) of 0 for concentration records and 1 for dosing records.\n\n# ---- Derivations ----\n\n# Get list of ADSL vars required for derivations\nadsl_vars &lt;- exprs(TRTSDT, TRTSDTM, TRT01P, TRT01A)\n\npc_dates &lt;- pc %&gt;%\n  # Join ADSL with PC (need TRTSDT for ADY derivation)\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Derive analysis date/time\n  # Impute missing time to 00:00:00\n  derive_vars_dtm(\n    new_vars_prefix = \"A\",\n    dtc = PCDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive dates and times from date/times\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 0,\n    DRUG = PCTEST,\n    NFRLT = if_else(PCTPTNUM &lt; 0, 0, PCTPTNUM), .after = USUBJID\n  )\n\n\n\nGet Dosing Information\nNext we will also join ADSL data with EX and derive dates/times. This section uses the {admiral} functions derive_vars_merged(), derive_vars_dtm(), and derive_vars_dtm_to_dt(). Time is imputed to 00:00:00 here for reasons specific to the sample data. Other imputation times may be used based on study details. Here we create NFRLT for EX data based on VISITDY using the formula (VISITDY - 1) * 24 using dplyr::mutate.\n\n# ---- Get dosing information ----\n\nex_dates &lt;- ex %&gt;%\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Keep records with nonzero dose\n  filter(EXDOSE &gt; 0) %&gt;%\n  # Add time and set missing end date to start date\n  # Impute missing time to 00:00:00\n  # Note all times are missing for dosing records in this example data\n  # Derive Analysis Start and End Dates\n  derive_vars_dtm(\n    new_vars_prefix = \"AST\",\n    dtc = EXSTDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  derive_vars_dtm(\n    new_vars_prefix = \"AEN\",\n    dtc = EXENDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 1,\n    NFRLT = 24 * (VISITDY - 1), .after = USUBJID\n  ) %&gt;%\n  # Set missing end dates to start date\n  mutate(AENDTM = case_when(\n    is.na(AENDTM) ~ ASTDTM,\n    TRUE ~ AENDTM\n  )) %&gt;%\n  # Derive dates from date/times\n  derive_vars_dtm_to_dt(exprs(ASTDTM)) %&gt;%\n  derive_vars_dtm_to_dt(exprs(AENDTM))\n\n\n\nExpand Dosing Records\nThe {admiral} function create_single_dose_dataset() will be used to expand dosing records between the start date and end date. The nominal time will also be expanded based on the values of EXDOSFRQ, for example “QD” will result in nominal time being incremented by 24 hours and “BID” will result in nominal time being incremented by 12 hours.\n\n# ---- Expand dosing records between start and end dates ----\n# Updated function includes nominal_time parameter\n\nex_exp &lt;- ex_dates %&gt;%\n  create_single_dose_dataset(\n    dose_freq = EXDOSFRQ,\n    start_date = ASTDT,\n    start_datetime = ASTDTM,\n    end_date = AENDT,\n    end_datetime = AENDTM,\n    nominal_time = NFRLT,\n    lookup_table = dose_freq_lookup,\n    lookup_column = CDISC_VALUE,\n    keep_source_vars = exprs(\n      STUDYID, USUBJID, EVID, EXDOSFRQ, EXDOSFRM,\n      NFRLT, EXDOSE, EXDOSU, EXTRT, ASTDT, ASTDTM, AENDT, AENDTM,\n      VISIT, VISITNUM, VISITDY,\n      TRT01A, TRT01P, DOMAIN, EXSEQ, !!!adsl_vars\n    )\n  ) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n    ADTM = ASTDTM,\n    DRUG = EXTRT\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ASTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(AENDTM))\n\n\n\nFind First Dose\nWe find the first dose for the concentration records using the {admiral} function derive_vars_merged()\n\n# ---- Find first dose per treatment per subject ----\n# ---- Join with ADPPK data and keep only subjects with dosing ----\n\nadppk_first_dose &lt;- pc_dates %&gt;%\n  derive_vars_merged(\n    dataset_add = ex_exp,\n    filter_add = (!is.na(ADTM)),\n    new_vars = exprs(FANLDTM = ADTM, EXDOSE_first = EXDOSE),\n    order = exprs(ADTM, EXSEQ),\n    mode = \"first\",\n    by_vars = exprs(STUDYID, USUBJID, DRUG)\n  ) %&gt;%\n  filter(!is.na(FANLDTM)) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n  )\n\n\n\nFind Previous Dose\nFor ADPPK we will find the previous dose with respect to actual time and nominal time. We will use `derive_vars_joined().\n\n# ---- Find previous dose  ----\n\nadppk_prev &lt;- adppk_first_dose %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_prev = ADTM, EXDOSE_prev = EXDOSE, AVISIT_prev = AVISIT,\n      AENDTM_prev = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    join_type = \"all\",\n    filter_add = NULL,\n    filter_join = ADTM &gt; ADTM.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n\n\nFind Previous Nominal Dose\n\n# ---- Find previous nominal dose ----\n\nadppk_nom_prev &lt;- adppk_prev %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_prev = NFRLT),\n    join_type = \"all\",\n    join_vars = exprs(NFRLT),\n    filter_add = NULL,\n    filter_join = NFRLT &gt; NFRLT.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n\n\nCombine PC and EX Data\nHere we combine PC and EX records. We will derive the relative time variables AFRLT (Actual Relative Time from First Dose), APRLT (Actual Relative Time from Previous Dose), and NPRLT (Nominal Relative Time from Previous Dose). Use derive_vars_duration() to derive AFRLT and APRLT. Note we defined EVID above with values of 0 for observation records and 1 for dosing records.\n\n# ---- Combine ADPPK and EX data ----\n# Derive Relative Time Variables\n\nadppk_aprlt &lt;- bind_rows(adppk_nom_prev, ex_exp) %&gt;%\n  group_by(USUBJID, DRUG) %&gt;%\n  mutate(\n    FANLDTM = min(FANLDTM, na.rm = TRUE),\n    min_NFRLT = min(NFRLT, na.rm = TRUE),\n    maxdate = max(ADT[EVID == 0], na.rm = TRUE), .after = USUBJID\n  ) %&gt;%\n  arrange(USUBJID, ADTM) %&gt;%\n  ungroup() %&gt;%\n  filter(ADT &lt;= maxdate) %&gt;%\n  # Derive Actual Relative Time from First Dose (AFRLT)\n  derive_vars_duration(\n    new_var = AFRLT,\n    start_date = FANLDTM,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive Actual Relative Time from Reference Dose (APRLT)\n  derive_vars_duration(\n    new_var = APRLT,\n    start_date = ADTM_prev,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive APRLT\n  mutate(\n    APRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(APRLT) ~ AFRLT,\n      TRUE ~ APRLT\n    ),\n    NPRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(NFRLT_prev) ~ NFRLT - min_NFRLT,\n      TRUE ~ NFRLT - NFRLT_prev\n    )\n  )\n\n\n\nDerive Analysis Variables\nThe expected analysis variable for ADPPK is DV or dependent variable. For this example DV is set to the numeric concentration value PCSTRESN. We will also include AVAL equivalent to DV for consistency with CDISC ADaM standards. MDV missing dependent variable will also be included.\n\n# ---- Derive Analysis Variables ----\n# Derive actual dose DOSEA and planned dose DOSEP,\n# Derive AVAL and DV\n\nadppk_aval &lt;- adppk_aprlt %&gt;%\n  mutate(\n    # Derive Actual Dose\n    DOSEA = case_when(\n      EVID == 1 ~ EXDOSE,\n      is.na(EXDOSE_prev) ~ EXDOSE_first,\n      TRUE ~ EXDOSE_prev\n    ),\n    # Derive Planned Dose\n    DOSEP = case_when(\n      TRT01P == \"Xanomeline High Dose\" ~ 81,\n      TRT01P == \"Xanomeline Low Dose\" ~ 54,\n      TRT01P == \"Placebo\" ~ 0\n    ),\n    # Derive PARAMCD\n    PARAMCD = case_when(\n      EVID == 1 ~ \"DOSE\",\n      TRUE ~ PCTESTCD\n    ),\n    ALLOQ = PCLLOQ,\n    # Derive CMT\n    CMT = case_when(\n      EVID == 1 ~ 1,\n      TRUE ~ 2\n    ),\n    # Derive BLQFL/BLQFN\n    BLQFL = case_when(\n      PCSTRESC == \"&lt;BLQ\" ~ \"Y\",\n      TRUE ~ \"N\"\n    ),\n    BLQFN = case_when(\n      PCSTRESC == \"&lt;BLQ\" ~ 1,\n      TRUE ~ 0\n    ),\n    AMT = case_when(\n      EVID == 1 ~ EXDOSE,\n      TRUE ~ NA_real_\n    ),\n    # Derive DV and AVAL\n    DV = PCSTRESN,\n    DVID = PCTESTCD,\n    AVAL = DV,\n    DVL = case_when(\n      DV != 0 ~ log(DV),\n      TRUE ~ NA_real_\n    ),\n    # Derive MDV\n    MDV = case_when(\n      EVID == 1 ~ 1,\n      is.na(DV) ~ 1,\n      TRUE ~ 0\n    ),\n    AVALU = case_when(\n      EVID == 1 ~ NA_character_,\n      TRUE ~ PCSTRESU\n    ),\n    RLTU = \"h\",\n    USTRESC = PCSTRESC,\n    UDTC = format_ISO8601(ADTM),\n    II = if_else(EVID == 1, 1, 0),\n    SS = if_else(EVID == 1, 1, 0),\n    ADDL = 0,\n    OCC = 1,\n  )\n\n\n\nAdd ASEQ\nWe add a sequence variable using the {admiral} function derive_var_obs_number().\n\n# ---- Add ASEQ ----\n\nadppk_aseq &lt;- adppk_aval %&gt;%\n  # Calculate ASEQ\n  derive_var_obs_number(\n    new_var = ASEQ,\n    by_vars = exprs(STUDYID, USUBJID),\n    order = exprs(AFRLT, EVID),\n    check_type = \"error\"\n  ) %&gt;%\n  mutate(\n    PROJID = DRUG,\n    PROJIDN = 1,\n    PART = 1,\n  )"
  },
  {
    "objectID": "adppk.html#derive-covariates-using-metacore",
    "href": "adppk.html#derive-covariates-using-metacore",
    "title": "ADPPK Template Walkthrough",
    "section": "Derive Covariates Using Metacore",
    "text": "Derive Covariates Using Metacore\nIn this step we will create our numeric covariates using the create_var_from_codelist() function from {metatools}.\n\n#---- Derive Covariates ----\n# Include numeric values for STUDYIDN, USUBJIDN, SEXN, RACEN etc.\n\ncovar &lt;- adsl %&gt;%\n  create_var_from_codelist(metacore, input_var = STUDYID, out_var = STUDYIDN) %&gt;%\n  create_var_from_codelist(metacore, input_var = SEX, out_var = SEXN) %&gt;%\n  create_var_from_codelist(metacore, input_var = RACE, out_var = RACEN) %&gt;%\n  create_var_from_codelist(metacore, input_var = ETHNIC, out_var = AETHNIC) %&gt;%\n  create_var_from_codelist(metacore, input_var = AETHNIC, out_var = AETHNICN) %&gt;%\n  create_var_from_codelist(metacore, input_var = ARMCD, out_var = COHORT) %&gt;%\n  create_var_from_codelist(metacore, input_var = ARMCD, out_var = COHORTC) %&gt;%\n  create_var_from_codelist(metacore, input_var = COUNTRY, out_var = COUNTRYN) %&gt;%\n  create_var_from_codelist(metacore, input_var = COUNTRY, out_var = COUNTRYL) %&gt;%\n  mutate(\n    STUDYIDN = as.numeric(word(USUBJID, 1, sep = fixed(\"-\"))),\n    SITEIDN = as.numeric(word(USUBJID, 2, sep = fixed(\"-\"))),\n    USUBJIDN = as.numeric(word(USUBJID, 3, sep = fixed(\"-\"))),\n    SUBJIDN = as.numeric(SUBJID),\n    ROUTE = unique(ex$EXROUTE),\n    FORM = unique(ex$EXDOSFRM),\n    REGION1 = COUNTRY,\n    REGION1N = COUNTRYN,\n    SUBJTYPC = \"Volunteer\",\n  ) %&gt;%\n  create_var_from_codelist(metacore, input_var = FORM, out_var = FORMN) %&gt;%\n  create_var_from_codelist(metacore, input_var = ROUTE, out_var = ROUTEN) %&gt;%\n  create_var_from_codelist(metacore, input_var = SUBJTYPC, out_var = SUBJTYP)\n\n\nDerive Additional Baselines\nNext we add additional baselines from vital signs and laboratory data. We will use the {admiral} functions derive_vars_merged() and derive_vars_transposed() to add these.\n\n#---- Derive additional baselines from VS and LB ----\n\nlabsbl &lt;- lb %&gt;%\n  filter(LBBLFL == \"Y\" & LBTESTCD %in% c(\"CREAT\", \"ALT\", \"AST\", \"BILI\")) %&gt;%\n  mutate(LBTESTCDB = paste0(LBTESTCD, \"BL\")) %&gt;%\n  select(STUDYID, USUBJID, LBTESTCDB, LBSTRESN)\n\ncovar_vslb &lt;- covar %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"HEIGHT\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(HTBL = VSSTRESN)\n  ) %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"WEIGHT\" & VSBLFL == \"Y\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(WTBL = VSSTRESN)\n  ) %&gt;%\n  derive_vars_transposed(\n    dataset_merge = labsbl,\n    by_vars = exprs(STUDYID, USUBJID),\n    key_var = LBTESTCDB,\n    value_var = LBSTRESN\n  ) %&gt;%\n  mutate(\n    BMIBL = compute_bmi(height = HTBL, weight = WTBL),\n    BSABL = compute_bsa(\n      height = HTBL,\n      weight = HTBL,\n      method = \"Mosteller\"\n    ),\n    CRCLBL = compute_egfr(\n      creat = CREATBL, creatu = \"SI\", age = AGE, weight = WTBL, sex = SEX,\n      method = \"CRCL\"\n    ),\n    EGFRBL = compute_egfr(\n      creat = CREATBL, creatu = \"SI\", age = AGE, weight = WTBL, sex = SEX,\n      method = \"CKD-EPI\"\n    )\n  ) %&gt;%\n  rename(TBILBL = BILIBL)\n\n\n\nCombine with Covariates\nWe combine our covariates with the rest of the data\n\n# Combine covariates with APPPK data\n\nadppk_prefinal &lt;- adppk_aseq %&gt;%\n  derive_vars_merged(\n    dataset_add = select(covar_vslb, !!!negate_vars(adsl_vars)),\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  arrange(STUDYIDN, USUBJIDN, AFRLT, EVID) %&gt;%\n  # Add RECSEQ\n  # Exclude records if needed\n  mutate(\n    RECSEQ = row_number(),\n    EXCLFCOM = \"None\"\n  ) %&gt;%\n  create_var_from_codelist(metacore, input_var = DVID, out_var = DVIDN) %&gt;%\n  create_var_from_codelist(metacore, input_var = EXCLFCOM, out_var = EXCLF)"
  },
  {
    "objectID": "adppk.html#check-data-with-metacore",
    "href": "adppk.html#check-data-with-metacore",
    "title": "ADPPK Template Walkthrough",
    "section": "Check Data With Metacore",
    "text": "Check Data With Metacore\nWe use {metacore} to perform a number of checks on the data. We will drop variables not in the specs and make sure all the variables from the specs are included.\n\n# Final Steps, Select final variables and Add labels\n# This process will be based on your metadata, no example given for this reason\n# ...\ndir &lt;- \"./output\"\n\n# Apply metadata and perform associated checks ----\n# uses {metatools}\n\nadppk &lt;- adppk_prefinal %&gt;%\n  drop_unspec_vars(metacore) %&gt;% # Drop unspecified variables from specs\n  check_variables(metacore) %&gt;% # Check all variables specified are present and no more\n  check_ct_data(metacore) %&gt;% # Checks all variables with CT only contain values within the CT\n  order_cols(metacore) %&gt;% # Orders the columns according to the spec\n  sort_by_key(metacore) # Sorts the rows by the sort keys"
  },
  {
    "objectID": "adppk.html#apply-labels-and-formats-with-xportr",
    "href": "adppk.html#apply-labels-and-formats-with-xportr",
    "title": "ADPPK Template Walkthrough",
    "section": "Apply Labels and Formats with xportr",
    "text": "Apply Labels and Formats with xportr\nUsing {xportr} we check variable type, assign variable lenght, add variable labels, add variable formats, and save a transport file.\n\nadppk_xpt &lt;- adppk %&gt;%\n  xportr_type(metacore) %&gt;% # Coerce variable type to match spec\n  xportr_length(metacore) %&gt;% # Assigns SAS length from a variable level metadata\n  xportr_label(metacore) %&gt;% # Assigns variable label from metacore specifications\n  xportr_format(metacore) %&gt;% # Assigns variable format from metacore specifications\n  xportr_df_label(metacore) %&gt;% # Assigns dataset label from metacore specifications\n  xportr_write(file.path(dir, \"adppk.xpt\")) # Write xpt v5 transport file"
  },
  {
    "objectID": "adppk.html#save-final-output",
    "href": "adppk.html#save-final-output",
    "title": "ADPPK Template Walkthrough",
    "section": "Save Final Output",
    "text": "Save Final Output\nFinally we save the final output. We will also create a CSV file for the modeler.\n\n# ---- Save output ----\nsaveRDS(adppk, file = file.path(dir, \"adppk.rds\"), compress = \"bzip2\")\n\n# Write CSV\nwrite_csv(adppk_xpt, \"./output/adppk.csv\")"
  }
]